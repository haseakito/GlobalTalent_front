name: Build Test

# defines when the events triggered
on:
    push:
        branches: [ main ]
    
    pull_request:
        branches: [ main ]

jobs:
    build:
        # defines a runner os
        runs-on: ubuntu-latest

        # defines a series of steps this workflow goes through 
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            
              # Set up Nodejs
            - name: Set up Nodejs
              uses: actions/setup-node@v3
              with:
                node-version: 18
                cache: npm

            # Cache node_modules for fater build
            - name: Cache node_modules
              uses: actions/cache@v3
              id: node_modules_cache_id
              env:
                cache_name: cache-node-modules
              with:
                path: '**/node_modules'
                key: ${{ runner.os }}-build-${{ env.cache_name }}-${{ hashFiles('**/package-lock.json') }}

              # If there's no cache for it, install the dependencies
            - name: Install dependencies
              if: ${{ steps.node_modules_cache_id.outputs.cache-hit != 'true' }}
              run: |
                npm i

              # Build the project
            - name: Build
              env:
                FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
                FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
                FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
                FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
                FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
                FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
                NEXT_PUBLIC_SERVICE_ID: ${{ secrets.NEXT_PUBLIC_SERVICE_ID }}
                NEXT_PUBLIC_TEMPLATE_ID: ${{ secrets.NEXT_PUBLIC_TEMPLATE_ID }}
                NEXT_PUBLIC_PUBLIC_API_KEY: ${{ secrets.NEXT_PUBLIC_PUBLIC_API_KEY }}
              run: |
                npm run build

              # Send success notification to Discord 
            - name: Discord Notification on Success
              if: ${{ success() }}
              uses: Ilshidur/action-discord@master
              env:
                DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
              with:
                args: 'The Project Successfully build!:rocket:'

              # Send failure notification to Discord 
            - name: Discord Notification on Success
              if: ${{ failure() }}
              uses: Ilshidur/action-discord@master
              env:
                DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
              with:
                args: 'The Project build Unsccessfull!:poop:'